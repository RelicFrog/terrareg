"""Add internal flag column to module_version table and foreign key to module provider to point to latest version

Revision ID: ef71db86c2a1
Revises: b0f952e4a027
Create Date: 2022-06-01 06:50:03.299444

"""
from alembic import op
import sqlalchemy as sa

from terrareg.loose_version import LooseVersion

# revision identifiers, used by Alembic.
revision = 'ef71db86c2a1'
down_revision = 'b0f952e4a027'
branch_labels = None
depends_on = None


from alembic import op
import sqlalchemy as sa
from sqlalchemy.engine import reflection
from terrareg.loose_version import LooseVersion

def upgrade():
    # Check if the 'latest_version_id' column exists
    conn = op.get_bind()
    inspector = reflection.Inspector.from_engine(conn)
    columns = [col['name'] for col in inspector.get_columns('module_provider')]

    # Only add the column if it does not already exist
    if 'latest_version_id' not in columns:
        op.add_column('module_provider', sa.Column('latest_version_id', sa.Integer(), nullable=True))

    # Add foreign key constraint (if not already present)
    with op.batch_alter_table('module_provider', schema=None) as batch_op:
        batch_op.create_foreign_key('latest_version_id', 'module_version', ['latest_version_id'], ['id'], onupdate='CASCADE', ondelete='SET NULL', use_alter=True)

    # Continue with the rest of your upgrade logic
    res = conn.execute(sa.text("""
        SELECT
            module_version.id AS module_version_id,
            module_version.version AS version,
            module_provider.id AS module_provider_id
        FROM module_version
        INNER JOIN module_provider ON module_provider.id=module_version.module_provider_id
        WHERE module_version.beta=0 AND module_version.published=1
    """))

    latest_versions = {}
    for row in res:
        version = row[1]
        provider_id = row[2]

        if provider_id not in latest_versions or LooseVersion(version) > LooseVersion(latest_versions[provider_id][1]):
            latest_versions[provider_id] = row

    # Update latest_version_id column
    for module_provider_id, row in latest_versions.items():
        conn.execute(
            sa.text("""
                UPDATE module_provider
                SET latest_version_id=:latest_version_id
                WHERE id=:module_provider_id
            """),
            latest_version_id=row[0],
            module_provider_id=module_provider_id
        )

    # Add 'internal' column with initial nullable state, set default, then alter to non-nullable
    if 'internal' not in [col['name'] for col in inspector.get_columns('module_version')]:
        op.add_column('module_version', sa.Column('internal', sa.BOOLEAN(), nullable=True))
        op.execute("UPDATE module_version SET internal=0")
        with op.batch_alter_table('module_version', schema=None) as batch_op:
            batch_op.alter_column('internal', existing_type=sa.BOOLEAN(), nullable=False)


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('module_version', 'internal')
    op.drop_constraint(None, 'module_provider', type_='foreignkey')
    op.drop_column('module_provider', 'latest_version_id')
    # ### end Alembic commands ###
